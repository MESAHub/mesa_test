#! /usr/bin/env ruby

# if true, submit cases to localhost:3000 and load local mesa_test library
# rather than system version
DEVELOPMENT_MODE = false

if DEVELOPMENT_MODE
  require_relative '../lib/mesa_test'
else
  require 'mesa_test'
end

require 'thor'
require 'yaml'

class MesaTest < Thor
  DEVELOPMENT_URI = 'http://localhost:3000'.freeze

  desc 'setup [CONFIG_FILE]', 'Setup MesaTestHub config file.'
  long_desc <<-LONGDESC
    If optional CONFIG_FILE is provided, search for that file and load it
    to provide default values for configuration. If not provided, the default
    file, ~/.mesa_test.yml, is used. The resulting config file is saved to
    the same location it was read from.
  LONGDESC
  def setup(config_file = File.join(ENV['HOME'], '.mesa_test.yml'))
    MesaTestSubmitter.new_from_config(config_file: config_file,
                                      force_setup: true)
  end

  desc 'test_one MESA_DIR TEST_CASE', 'run, check, and submit one test case'
  long_desc <<-LONGDESC
  Run and check TEST_CASE, which resides in MESA_DIR/star/test_suite. Then
  report results to MesaTestHub. TEST_CASE can also be an integer corresponding
  to the line number of the test name in its do1_test_source file (or a
  concatenated version of that file if no module is specified). Modules are
  searched/concatenated in this order:

  #{MesaTestCase.modules.map { |mod| '    ' + mod.to_s }.join(', ')}
  LONGDESC
  option :force, desc: 'When submitting, assume submission data in ' +
                       '~/.mesa_test.yml are correct rather than checking ' +
                       'with user.', type: :boolean, default: false,
                       aliases: '-f'
  option :submit, desc: 'Submit results (if any) to MesaTestHub.',
                  type: :boolean, default: true
  option :diff, type: :boolean, default: false, desc: 'Assume checksums are ' + 
                'up to date and perform diff', aliases: '-d'
  option :svn, desc: 'Use svn to gather log/version data. Safe to use when ' +
               'also using --no-submit; else may give bad version numbers.',
               type: :boolean, default: true
  option :set_sdk, desc: 'Override user- and test-generated data to deterine' +
                   ' if the SDK is used and instead use value of --using_sdk.',
                   type: :boolean, default: false
  option :using_sdk, desc: 'Assume we are using the SDK and automatically ' +
                     'determine SDK version. Ignored unless using --set-sdk).',
                     type: :boolean, default: true
  option :module, desc: 'Which module to test and/or submit, if applicable.',
                  type: :string, default: 'all', aliases: '-m'                  
  option :log, type: :boolean, default: true, desc: 'Save yml file of test ' \
               'results in test case directory.'
  option :auto_diff, desc: 'Automatically determine if diffs should be run '\
                     'from svn log entry. Overrides --diff or --no-diff.',
                     type: :boolean, default: false
  def test_one(mesa_dir, test_case_name)
    s = create_and_check_submitter(force: options[:force]) if options[:submit]
    m = create_and_check_mesa(mesa_dir: mesa_dir, diff: options[:diff],
                              mod: options[:module].downcase.to_sym,
                              use_svn: options[:svn], using_sdk: using_sdk?(s),
                              auto_diff: options[:auto_diff])
    t = create_and_check_test_case(mesa: m, test_case_name: test_case_name,
                                   mod: options[:module].downcase.to_sym)

    # clean and run test
    t.clean
    t.do_one

    # log results
    t.log_results if options[:log]

    # bail out if not submitting
    return unless options[:submit]

    # submit results
    print 'Submitting results to ' + s.base_uri + '... '
    s.submit(t)
    puts "Done.\n"
  end

  desc 'test_revision MESA_DIR', 'test and submit all tests as a packaged version'
  long_desc <<-LONGDESC
  Run and check all test cases residing in MESA_DIR/star/test_suite. Then
  report results to MesaTestHub. Specifically, runs and checks all tests
  detailed in MESA_DIR/star/test_suite/do1_test_source. Also submit version
  information with test instances. Submits all test instances and version data
  in a single request rather than case-by-case in `test_all`.
  LONGDESC

  option :force, desc: 'When submitting, assume submission data in ' +
                       '~/.mesa_test.yml are correct rather than checking ' +
                       'with user.', type: :boolean, default: false,
                       aliases: '-f'
  option :submit, desc: 'Submit results (if any) to MesaTestHub.',
                  type: :boolean, default: true
  option :diff, type: :boolean, default: false, desc: 'Assume checksums are ' + 
                'up to date and perform diff', aliases: '-d'
  option :svn, desc: 'Use svn to gather log/version data. Safe to use when ' +
               'also using --no-submit; else may give bad version numbers.',
               type: :boolean, default: true
  option :set_sdk, desc: 'Override user- and test-generated data to deterine' +
                   ' if the SDK is used and instead use value of --using_sdk.',
                   type: :boolean, default: false
  option :using_sdk, desc: 'Assume we are using the SDK and automatically ' +
                     'determine SDK version. Ignored unless using --set-sdk).',
                     type: :boolean, default: true
  option :module, desc: 'Which module to test and/or submit, if applicable.',
                  type: :string, default: 'all', aliases: '-m'                  
  option :log, type: :boolean, default: true, desc: 'Save yml file of test ' \
               'results in test case directory.'
  option :auto_diff, desc: 'Automatically determine if diffs should be run '\
                     'from svn log entry. Overrides --diff or --no-diff.',
                     type: :boolean, default: false
  def test_revision(mesa_dir)
    s = create_and_check_submitter(force: options[:force]) if options[:submit]
    m = create_and_check_mesa(mesa_dir: mesa_dir, diff: options[:diff],
                              mod: options[:module].downcase.to_sym,
                              use_svn: options[:svn],
                              using_sdk: using_sdk?(s),
                              auto_diff: options[:auto_diff])

    # run all tests
    m.each_test_run_and_diff(log_results: options[:log],
                             mod: options[:module].downcase.to_sym)

    # submit all tests
    s.submit_revision(m) if options[:submit]
  end


  desc 'submit_one MESA_DIR TEST_CASE', 'submit one completed test case'
  long_desc <<-LONGDESC
  Load complete test case data from existing YAML file and submit to MESA.
  TEST_CASE can also be an integer corresponding to the line number of the test
  name in its do1_test_source file (or a concatenated version of that file if
  no module is specified). Modules are searched/concatenated in this order:

  #{MesaTestCase.modules.map { |mod| '    ' + mod.to_s }.join(', ')}
  LONGDESC

  option :force, desc: 'When submitting, assume submission data in ' +
                       '~/.mesa_test.yml are correct rather than checking ' +
                       'with user.', type: :boolean, default: false,
                       aliases: '-f'
  option :svn, desc: 'Use svn to gather log/version data. NECESSARY TO GET ' +
               'ACCURATE VERSION NUMBER.', type: :boolean, default: true
  option :set_sdk, desc: 'Override user- and test-generated data to deterine' +
                   ' if the SDK is used and instead use value of --using_sdk.',
                   type: :boolean, default: false
  option :using_sdk, desc: 'Assume we are using the SDK and automatically ' +
                     'determine SDK version. Ignored unless using --set-sdk).',
                     type: :boolean, default: true
  option :module, desc: 'Which module to test and/or submit, if applicable.',
                  type: :string, default: 'all', aliases: '-m'
  def submit_one(mesa_dir, test_case_name)
    s = create_and_check_submitter(force: options[:force])
    m = create_and_check_mesa(mesa_dir: mesa_dir,
                              mod: options[:module].downcase.to_sym,
                              using_sdk: using_sdk?(s), use_svn: options[:svn])
    t = create_and_check_test_case(mesa: m, test_case_name: test_case_name,
                                   mod: options[:module].downcase.to_sym)
    # load test results
    t.load_results

    # submit results
    print 'Submitting results to ' + s.base_uri + '... '
    s.submit(t)
    puts "Done.\n"
  end

  desc 'submit_revision MESA_DIR', 'submit version with pre-run test cases'
  long_desc <<-LONGDESC
  Load results for all test cases residing in MESA_DIR/star/test_suite. Then
  submit results to MesaTestHub. Specifically, loads and submits all tests
  detailed in MESA_DIR/star/test_suite/do1_test_source along with version data
  (number, author, and commit message). Unlike submit_all, this submits all
  test cases AND version info in a single request rather than just the cases
  in series.
  LONGDESC
  option :force, desc: 'When submitting, assume submission data in ' +
                       '~/.mesa_test.yml are correct rather than checking ' +
                       'with user.', type: :boolean, default: false,
                       aliases: '-f'
  option :module, desc: 'Which module to test and/or submit, if applicable.',
                  type: :string, default: 'all', aliases: '-m'                       
  option :svn, desc: 'Use svn to gather log/version data. NECESSARY TO GET ' +
               'ACCURATE VERSION NUMBER.', type: :boolean, default: true
  option :set_sdk, desc: 'Override user- and test-generated data to deterine' +
                   ' if the SDK is used and instead use value of --using_sdk.',
                   type: :boolean, default: false
  option :using_sdk, desc: 'Assume we are using the SDK and automatically ' +
                     'determine SDK version. Ignored unless using --set-sdk).',
                     type: :boolean, default: true
  def submit_revision(mesa_dir)
    s = create_and_check_submitter(force: options[:force])
    m = create_and_check_mesa(mesa_dir: mesa_dir,
                              mod: options[:module].downcase.to_sym,
                              use_svn: options[:svn], using_sdk: using_sdk?(s))
    begin
      m.check_installation
    rescue MesaDirError
      shell.say %q{This MESA installation doesn't seem to be compiled } \
        'properly. Submitting a compilation failure to MESATestHub.', :red
    else
      # load all test data
      m.each_test_load_results(mod: options[:module].downcase.to_sym)
    ensure
      # submit all tests
      s.submit_revision(m)
    end
  end


  desc 'install VERSION_NUMBER MESA_DIR', 'download and install mesa release '\
    'VERSION_NUMBER to directory MESA_DIR'
  long_desc <<-LONGDESC
  Calls to svn to install mesa release VERSION_NUMBER into the directory
  MESA_DIR. Basically just an svn checkout followed by going into the directory
  and running ./clean and ./install. SDK or compilers must be set up prior.
  Does not affect the user's MESA_DIR or other environment variables.
  LONGDESC
  def install(version, mesa_dir)
    m = Mesa.download(version_number: version, new_mesa_dir: mesa_dir)
    m.clean
    m.install
  end

  desc 'install_and_test_revision VERSION_NUMBER MESA_DIR', 'download and '\
  'install mesa release VERSION_NUMBER to directory MESA_DIR, run all tests,'\
  'and submit version and test data in single request.'
  long_desc <<-LONGDESC
  Calls to svn to install mesa release VERSION_NUMBER into the directory
  MESA_DIR. Basically just an svn checkout followed by going into the directory
  and running ./clean and ./install. SDK or compilers must be set up prior.
  Once installation is complete, run the test suite, and report results
  (version and all test data) to MesaTestHub in a single request (whereas
  install_and_test_all only submits test data and does so in a serial fashion).
  Does not affect the user's MESA_DIR or other environment variables. This is
  basically a shortcut for running

    `mesa_test install SOME_VERSION SOME_DIR`

  followed by

    `mesa_test test_revision SOME_DIR`

  If VERSION_NUMBER is 'non-paxton' or 'non_paxton', then the most recent
  commit by anyone other than Bill Paxton ('bill_paxton') is tested and the
  --diff flag is ignored and set to false. Note that using 'HEAD' for version
  number will automatically select the most recent release, regardless of the
  author.
  LONGDESC

  option :force, desc: 'When submitting, assume submission data in ' +
                       '~/.mesa_test.yml are correct rather than checking ' +
                       'with user.', type: :boolean, default: false,
                       aliases: '-f'
  option :submit, desc: 'Submit results (if any) to MesaTestHub.',
                  type: :boolean, default: true
  option :diff, type: :boolean, default: false, desc: 'Assume checksums are ' + 
                'up to date and perform diff', aliases: '-d'
  option :svn, desc: 'Use svn to gather log/version data. Safe to use when ' +
               'also using --no-submit; else may give bad version numbers.',
               type: :boolean, default: true
  option :set_sdk, desc: 'Override user- and test-generated data to deterine' +
                   ' if the SDK is used and instead use value of --using_sdk.',
                   type: :boolean, default: false
  option :using_sdk, desc: 'Assume we are using the SDK and automatically ' +
                     'determine SDK version. Ignored unless using --set-sdk).',
                     type: :boolean, default: true
  option :module, desc: 'Which module to test and/or submit, if applicable.',
                  type: :string, default: 'all', aliases: '-m'
  option :destroy, type: :boolean, desc: 'Delete mesa installation upon ' \
                   'submission of complete results.', default: false
  option :log, type: :boolean, default: true, desc: 'Save yml file of test ' \
               'results in test case directory.'
  option :auto_diff, desc: 'Automatically determine if diffs should be run '\
                     'from svn log entry. Overrides --diff or --no-diff.',
                     type: :boolean, default: false
  def install_and_test_revision(version, mesa_dir)
    s = nil # to make sure using_sdk? below will work properly
    s = create_and_check_submitter(force: options[:force]) if options[:submit]
    mesa_version, diff = filter_version_and_diff(version, s)
    if mesa_version.nil?
      puts 'No commits by anyone other than Bill Paxton since '\
        "r#{s.last_tested}. Exiting."
      return
    end
    m = Mesa.download(version_number: mesa_version, new_mesa_dir: mesa_dir,
                      use_svn: options[:svn], using_sdk: using_sdk?(s))
    begin
      m.clean
      m.install
    rescue MesaDirError
      shell.say "\nFailed in compiling MESA r-#{m.version_number}.", :red
    else
      check_mesa(m)
      update_mesa(mesa: m, diff: diff, mod: options[:module].downcase.to_sym,
                  auto_diff: options[:auto_diff])

      # run all tests. Don't be fooled, whether or not a diff happens is set
      # by the diff attribute of the mesa object, set above.
      m.each_test_run_and_diff(mod: options[:module].downcase.to_sym,
                               log_results: options[:log])
    ensure
      # submit all version and test data
      successfully_submitted = false
      successfully_submitted = s.submit_revision(m) if options[:submit]

      # if requested, installation and submission are successful, destroy the
      # directory
      m.destroy if successfully_submitted && options[:destroy] && m.installed?
    end
  end  

  private

  def check_user_and_computer(submitter)
    computer_check = submitter.confirm_computer
    if computer_check['valid']
      puts computer_check['message']
    else
      $stderr.puts computer_check['message']
      exit 1
    end
  end

  def create_and_check_submitter(force: false)
    s = if DEVELOPMENT_MODE
          MesaTestSubmitter.new_from_config(base_uri: DEVELOPMENT_URI)
        else
          MesaTestSubmitter.new_from_config
        end
    unless force
      s.setup unless s.confirm_computer_data
    end
    check_user_and_computer s
    s
  end

  def create_and_check_mesa(mesa_dir:, use_svn: true, diff: true, mod: :all,
                            using_sdk: true, auto_diff: false)
    m = Mesa.new(mesa_dir: mesa_dir, use_svn: use_svn, using_sdk: using_sdk)
    check_mesa(m)
    update_mesa(mesa: m, diff: diff, mod: mod, auto_diff: auto_diff)
    m
  end

  def check_mesa(mesa)
    unless mesa.downloaded?
      raise MesaDirError, "Invalid MESA_DIR: #{mesa_dir}. Please download " \
      'and install a valid MESA version or provide the path to one.'
    end
  end

  def update_mesa(mesa:, diff: true, mod: :all, auto_diff: false)
    mesa.load_test_source_data(mod: mod)
    # choose whether to update checksums.
    mesa.update_checksums = !diff unless diff.nil?
    # automatically figure out diff situation. Overrides choice from diff!
    mesa.determine_diff if auto_diff
  end

  def create_and_check_test_case(mesa:, test_case_name:, mod: :all)
    t = mesa.find_test_case(test_case_name: test_case_name, mod: mod)
    # return test case if it was found
    return t unless t.nil?
    # test case was not found. Throw an error.
    msg = "No such test case, #{test_case_name} found in any of "
    # this should care about the value in `mod`. Current behavior is only
    # appropriate if `mod` is :all.
    msg << MesaTestCase.modules.map do |this_mod|
      File.join(mesa.test_suite_dir(mod: this_mod), 'do1_test_source')
    end.join(' or ')
    msg << '.'
    raise TestCaseDirError, msg
  end

  def filter_version_and_diff(version, submitter)
    if %w[non-paxton non_paxton].include?(version.to_s.downcase)
      [Mesa.last_non_paxton_revision(submitter.last_tested), false]
    else
      [version, options[:diff]]
    end
  end

  # determine whether or not we can assume the test should be / was run with
  # the SDK. This results should only be relevant if a test is GOING TO BE RUN.
  # If it has already been run, then the compiler and compiler version have
  # already been set (or the opportunity was lost, either way this won't help.)
  # 
  # This gets used in a lot of places where it probably isn't necessary, just 
  # to prevent problems later on if things change, as it does no harm when it
  # doesn't help.
  # 
  # The only parameter is a submitter, if there is one to lean on. If there
  # isn't, it's no problem.
  def using_sdk?(s = nil)
    # did user specify so? Trust them
    if options[:set_sdk]
      options[:using_sdk]
    # are we submitting? scrape compiler info from that
    elsif s
      s.compiler == 'SDK'
    # we don't have a submitter... need to read config file (same thing 
    # submitter is doing)
    elsif File.exist?(File.join(ENV['HOME'], '.mesa_test.yml'))
      data = YAML.load(File.read(File.join(ENV['HOME'], '.mesa_test.yml')))
      data['compiler'] == 'SDK'
    # nothing works. Don't tell mesa that we are using SDK (we could still be
    # using it, but it's up to a future submitter to tell the web site so.)
    else
      false
    end
  end
end

# actually start the CLI
MesaTest.start(ARGV)
